{"version":3,"sources":["store/actions/actionGenerators.js","store/actions/actionTypes.js","utils/configs.js","components/Dropdown.js","components/SearchBar.js","components/Spinner.js","components/BankDataTable.js","App.js","store/reducers/bankReducer.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["getBankDetails","cityName","dispatch","getState","console","log","type","payload","banks","axios","get","concat","then","response","data","bankCity","catch","error","connect","changeCity","props","react_default","a","createElement","className","onChange","event","target","value","cities","map","city","index","key","SearchBar","_this","this","placeholder","changeHandler","React","Component","components_Spinner","components_BankDataTable","tableBodyData","startIndex","i","address","toLowerCase","indexOf","searchText","push","ifsc","bank_id","branch","bank_name","id","bank","App","state","offset","handleClick","e","setState","searchTextHandler","fetchBankDetails","prevProps","prevState","pageCount","selectedCityData","Math","ceil","_this2","style","textAlign","components_Dropdown","SearchBar_SearchBar","semantic_ui_react_button_pagination_default","limit","total","floor","length","onClick","selectedCity","initialState","bankReducer","arguments","undefined","action","Object","objectSpread","defineProperty","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","cacheEnhancer","Boolean","location","hostname","match","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9add893d.chunk.js","sourcesContent":["import axios from \"axios\";\n// import { checkCacheValid } from \"redux-cache\";\n\nimport {API_URL} from \"../../utils/configs\";\nimport { START,SUCCESS,FAILURE, SELECTED_CITY} from \"./actionTypes\";\n\nexport const getBankDetails=(cityName)=>(dispatch,getState)=>{\n    //const isCacheValid = checkCacheValid(getState, \"banks\");\n    console.log(\"inside\");\n\t//if (isCacheValid) { return null; }\n     console.log(getState());\n     dispatch({type:SELECTED_CITY,payload:{cityName}});\n     if(getState().banks[cityName])\n     {\n         return null;\n     }\n\tdispatch({\n\t\ttype: START\n\t});\n\n\taxios.get(`${API_URL}${cityName}`)\n\t\t.then((response) => {\n            console.log(response.data);\n\t\t\t\tdispatch({\n\t\t\t\ttype: SUCCESS,\n\t\t\t\tpayload: {data:response.data,bankCity:cityName},\n\t\t\t});\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.log('error: ', error);\n\t\t\tdispatch({\n\t\t\t\ttype: FAILURE,\n\t\t\t\tpayload: error,\n\t\t\t});\n\t\t});\n}","export const START=\"START\";\nexport const SUCCESS=\"SUCCESS\";\nexport const FAILURE=\"FAILURE\";\nexport const SELECTED_CITY=\"SELECTED_CITY\";","export const API_URL=\"https://vast-shore-74260.herokuapp.com/banks?city=\"","import React from 'react'\nimport {connect} from \"react-redux\";\nimport { getBankDetails } from '../store/actions/actionGenerators';\nimport \"./Dropdown.css\";\nconst mapDispatchToProps=(dispatch)=>{\n    return {\n        \"changeCity\":(cityName)=>dispatch(getBankDetails(cityName))\n    }\n}\nexport default connect(null,mapDispatchToProps)((props) => {\n  return (\n    <div className=\"Dropdown\">\n      <select className=\"select-css\" onChange={(event)=>{\n        console.log(event.target.value);  \n        props.changeCity(event.target.value)}}>\n      {props.cities.map((city,index)=>{\n          return <option key={index}>{city}</option>\n      })}\n      </select>\n    </div>\n  )\n})\n","import React from 'react'\nimport \"./SearchBar.css\";\nexport default class SearchBar extends React.Component {\n\n \nrender()\n  {  \n  return (\n    <div className=\"SearchBar\">\n      <input type=\"text\" placeholder=\"search bank by address\" className=\"Input\" onChange={(event)=>this.props.changeHandler(event)}/>\n    </div>\n  )\n}\n}\n","import React from 'react'\nimport \"./Spinner.css\";\nexport default () => {\n  return (\n    <div className=\"spinner\">\n      \n    </div>\n  )\n}\n","import React from 'react'\nimport \"./BankDataTable.css\";\nimport Spinner from './Spinner';\nexport default (props) => {\n   let tableBodyData=[];\n   if(props.data)\n   {console.log(\"inside\");\n   console.log(props.startIndex);\n       for(let i=props.startIndex;i<props.startIndex+10;i++)\n       {\n          if(props.data[i].address.toLowerCase().indexOf(props.searchText.toLowerCase())!==-1)\n          { \n          tableBodyData.push(\n            (<tr key={i}><td>{props.data[i].ifsc}</td>\n            <td>{props.data[i].bank_id}</td>\n            <td>{props.data[i].branch}</td>\n            <td>{props.data[i].address}</td>\n            <td>{props.data[i].bank_name}</td></tr>))\n       }\n    }\n       console.log(tableBodyData);\n   }else{\n       return (<Spinner/>)\n   }\n   \n  return (\n    <div>\n      <table id=\"customers\">\n      <thead>\n      <tr><th>IFSC</th>\n      <th>BANK_ID</th>\n      <th>BRANCH</th>\n      <th>ADDRESS</th>\n      <th>BANK_NAME</th>\n      </tr>\n      </thead>\n      <tbody>\n      {tableBodyData && tableBodyData.map((bank,index)=>{\n          console.log(bank);\n          return bank\n      })}\n      </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Pagination from 'semantic-ui-react-button-pagination';\nimport './App.css';\nimport Dropdown from \"./components/Dropdown\";\nimport SearchBar from \"./components/SearchBar\";\nimport BankDataTable from \"./components/BankDataTable\";\nimport { getBankDetails } from './store/actions/actionGenerators';\n\nclass App extends React.Component{\n  state={\n    offset:0,\n    searchText:\"\"\n  }\n  componentDidMount(){\n    //this.fetchBanks(\"MUMBAI\");\n    this.props.fetchBankDetails(\"MUMBAI\");\n  }\n  componentDidUpdate(prevProps,prevState)\n  {\n    if(this.state.pageCount!==prevState.pageCount && this.props.selectedCityData)\n    {\n      this.setState({pageCount:Math.ceil(this.props.selectedCityData/10)});\n    }\n  }\n  handleClick=(e,props,offset)=>{\n   this.setState({offset});\n  }\n  searchTextHandler=(event)=>{\n   this.setState({searchText:event.target.value});\n  }\n  render()\n  {\n    console.log(this.state.pageCount);\n  return (\n    <div>\n     <h1 style={{textAlign:\"center\"}}>Bank Branches</h1> \n     <div className=\"row\">\n     <Dropdown cities={[\"MUMBAI\",\"DELHI\",\"BANGALORE\",\"CHENNAI\",\"KOLKATA\"]}/>\n     <SearchBar changeHandler={this.searchTextHandler}/>\n     </div>\n     <BankDataTable data={this.props.selectedCityData} startIndex={this.state.offset} searchText={this.state.searchText}/>\n     {this.props.selectedCityData && <Pagination\n      offset={this.state.offset}\n      limit={10}\n      total={Math.floor(this.props.selectedCityData.length/10)}\n      onClick={(event,props,offset) => this.handleClick(event,props,offset)}\n    />}\n    </div>\n  );\n  }\n}\nconst mapStateToProps=(state)=>{\n  return {\n    \"selectedCityData\":state.banks[state.banks.selectedCity],\n  }\n}\nconst mapDispatchToProps=(dispatch)=>{\n  return {\n    \"fetchBankDetails\":(cityName)=>dispatch(getBankDetails(cityName))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","//import {DEFAULT_KEY,generateCacheTTL} from \"redux-cache\";\nimport {SUCCESS,FAILURE, SELECTED_CITY} from \"../actions/actionTypes\";\nconst initialState = {\n\t//[DEFAULT_KEY]: null,\n\tselectedCity:\"MUMBAI\"\n}\n\nconst bankReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t//[DEFAULT_KEY]: generateCacheTTL(),\n\t\t\t\t[action.payload.bankCity]:action.payload.data\n\t\t\t};\n\t\t}\n\t\tcase SELECTED_CITY:{\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedCity:action.payload.cityName\n\t\t\t}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn state;\n\t\t}\n\t}\n}\n\nexport default bankReducer;\n","import {combineReducers} from \"redux\";\nimport bankReducer from \"./bankReducer\";\nexport default combineReducers({banks:bankReducer});","import { cacheEnhancer } from \"redux-cache\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport default createStore(rootReducer,composeEnhancers(\n    applyMiddleware(thunk),\n    cacheEnhancer({log:true})\n))","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}